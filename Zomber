<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zombie Shooter Game</title>
    <style>
        canvas {
            border: 2px solid black;
            display: block;
            margin: auto;
        }

        #respawnButton {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 10px 20px;
            font-size: 20px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="1000" height="600"></canvas>
    <button id="respawnButton" onclick="respawn()">Respawn</button>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        let playerName = prompt("Enter your name:");
        if (!playerName) {
            playerName = "Anonymous";
        }

        const player = {
            x: 50,
            y: canvas.height / 2,
            width: 50,
            height: 50,
            speed: 5,
            directionX: 'still',
            directionY: 'still',
            reloading: false,
            bulletsInMagazine: 2 // Decreased magazine size to 2 bullets per magazine
        };

        const bullets = [];
        const zombies = [];
        let gameOver = false;
        let startTime = Date.now();
        let leaderboard = [];

        function gameLoop() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (!gameOver) {
                movePlayer();
                drawPlayer();
                drawBullets();
                moveBullets();
                spawnZombies();
                moveZombies();
                drawZombies();
                checkCollisions();
                drawTimeSurvived();
            } else {
                drawGameOver();
                updateLeaderboard();
                drawLeaderboard();
                document.getElementById('respawnButton').style.display = 'block';
            }

            requestAnimationFrame(gameLoop);
        }

        function movePlayer() {
            if (player.directionX === 'right' && player.x < canvas.width - player.width) {
                player.x += player.speed;
            } else if (player.directionX === 'left' && player.x > 0) {
                player.x -= player.speed;
            }

            if (player.directionY === 'up' && player.y > 0) {
                player.y -= player.speed;
            } else if (player.directionY === 'down' && player.y < canvas.height - player.height) {
                player.y += player.speed;
            }
        }

        function drawPlayer() {
            ctx.fillStyle = 'blue';
            ctx.fillRect(player.x, player.y, player.width, player.height);
        }

        function drawBullets() {
            ctx.fillStyle = 'red';
            bullets.forEach(bullet => {
                ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
            });
        }

        function moveBullets() {
            bullets.forEach(bullet => {
                bullet.x += bullet.speed;
            });

            bullets.forEach((bullet, index) => {
                if (bullet.x > canvas.width) {
                    bullets.splice(index, 1);
                }
            });
        }

        function spawnZombies() {
            if (Math.random() < 0.002 + (getTimeSurvived() * 0.0001)) { // Adjust spawn rate
                const zombie = {
                    x: canvas.width,
                    y: Math.random() * canvas.height,
                    width: 50,
                    height: 50,
                    speed: Math.random() * 1.5 + 0.5 // Adjust speed
                };
                zombies.push(zombie);
            }
        }

        function moveZombies() {
            zombies.forEach(zombie => {
                if (zombie.x > player.x) {
                    zombie.x -= zombie.speed;
                }
                if (zombie.x < player.x) {
                    zombie.x += zombie.speed;
                }
                if (zombie.y > player.y) {
                    zombie.y -= zombie.speed;
                }
                if (zombie.y < player.y) {
                    zombie.y += zombie.speed;
                }
            });
        }

        function drawZombies() {
            ctx.fillStyle = 'green';
            zombies.forEach(zombie => {
                ctx.fillRect(zombie.x, zombie.y, zombie.width, zombie.height);
            });
        }

        function checkCollisions() {
            zombies.forEach((zombie, zombieIndex) => {
                if (
                    player.x < zombie.x + zombie.width &&
                    player.x + player.width > zombie.x &&
                    player.y < zombie.y + zombie.height &&
                    player.y + player.height > zombie.y
                ) {
                    // Collision detected, player is attacked
                    gameOver = true;
                    stopTimer();
                }

                bullets.forEach((bullet, bulletIndex) => {
                    if (
                        bullet.x < zombie.x + zombie.width &&
                        bullet.x + bullet.width > zombie.x &&
                        bullet.y < zombie.y + zombie.height &&
                        bullet.y + bullet.height > zombie.y
                    ) {
                        // Collision detected, bullet hit the zombie
                        zombies.splice(zombieIndex, 1); // Remove the zombie
                        bullets.splice(bulletIndex, 1); // Remove the bullet
                    }
                });
            });
        }

        function drawGameOver() {
            ctx.fillStyle = 'black';
            ctx.font = '40px Arial';
            ctx.fillText('Game Over', canvas.width / 2 - 100, canvas.height / 2 - 50);
            ctx.font = '20px Arial';
            ctx.fillText('You survived for ' + getTimeSurvived() + ' seconds', canvas.width / 2 - 130, canvas.height / 2);
            ctx.fillText('Leaderboard:', canvas.width / 2 - 100, canvas.height / 2 + 50);
        }

        function drawTimeSurvived() {
            ctx.fillStyle = 'black';
            ctx.font = '20px Arial';
            ctx.fillText('Time Survived: ' + getTimeSurvived() + ' seconds', 10, 30);
        }

        function getTimeSurvived() {
            if (!gameOver) {
                return Math.floor((Date.now() - startTime) / 1000);
            } else {
                return Math.floor((stopTime - startTime) / 1000);
            }
        }

        function stopTimer() {
            stopTime = Date.now();
        }

        function updateLeaderboard() {
            leaderboard.push({ name: playerName, score: getTimeSurvived() });
            leaderboard.sort((a, b) => b.score - a.score);
            leaderboard = leaderboard.filter((leader, index, self) =>
                index === self.findIndex((t) => (
                    t.name === leader.name && t.score === leader.score
                ))
            );
            leaderboard = leaderboard.slice(0, 5);
        }

        function drawLeaderboard() {
            ctx.fillStyle = 'black';
            ctx.font = '20px Arial';
            leaderboard.forEach((entry, index) => {
                ctx.fillText(`${index + 1}. ${entry.name}: ${entry.score} seconds`, canvas.width / 2 - 100, canvas.height / 2 + 80 + index * 30);
            });
        }

        function respawn() {
            player.x = 50;
            player.y = canvas.height / 2;
            bullets.length = 0;
            zombies.length = 0;
            gameOver = false;
            startTime = Date.now();
            document.getElementById('respawnButton').style.display = 'none';
        }

        document.addEventListener('keydown', function(event) {
            if (!gameOver) {
                if (event.key === 'ArrowRight') {
                    player.directionX = 'right';
                } else if (event.key === 'ArrowLeft') {
                    player.directionX = 'left';
                } else if (event.key === 'ArrowUp') {
                    player.directionY = 'up';
                } else if (event.key === 'ArrowDown') {
                    player.directionY = 'down';
                }
            }
        });

        document.addEventListener('keyup', function(event) {
            if (!gameOver) {
                if (event.key === 'ArrowRight' || event.key === 'ArrowLeft') {
                    player.directionX = 'still';
                }
                if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
                    player.directionY = 'still';
                }
            }
        });

        document.addEventListener('keydown', function(event) {
            if (!gameOver && event.key === ' ') { // Spacebar for shooting
                if (!player.reloading && player.bulletsInMagazine > 0) {
                    player.bulletsInMagazine--;
                    const bullet = {
                        x: player.x + player.width,
                        y: player.y + player.height / 2,
                        width: 10,
                        height: 2,
                        speed: 10
                    };
                    bullets.push(bullet);
                }
                if (player.bulletsInMagazine === 0 && !player.reloading) {
                    player.reloading = true;
                    setTimeout(() => {
                        player.bulletsInMagazine = 2; // Reload time
                        player.reloading = false;
                    }, 2000); // Adjust reload time in milliseconds
                }
            }
        });

        gameLoop();
    </script>
</body>
</html>




        





     



                







